<job id="sshj">
  <script language="javascript" src="libcommon.js"/>
  <script language="javascript">

// ===> To add a much longer sleeping time out when no connection on corresponding server for today.

// ssh command
// With ssh V7, option -J in ssh before V8 does NOT WORK correctly, so we use it.
SSH_CMD='ssh.exe'
// With ssh V8, option -J in ssh V8 does WORK correctly, so we use encapsulated "-o ProxyCommand".
//SSH_CMD ='C:\\Software\\OpenSSH\\ssh.exe'

// No trace by default
trace=has_narg("trace");
// By default does not check host key
if (!has_narg("hostk")) SSH_CMD+=' -o StrictHostKeyChecking=no ';

// There are 3 available types of terminal emulators :
// 1) raw is the default windows cmd console it is quite a bad terminal emulator but it exists by default on all windows systems.
// 2) pterm or putty use putty terminal emulator, it is a better terminal emulator but as to be installed (whether in admin or user mode).
// 3) mintty is a fork of putty adapted for cygwin and msys but with some issue corrections and enhanced functionnalities (graphics ...)
term_type=narg_val("term");
if (term_type === null) term_type='raw';

sleep_val=narg_val("sleep");
if (sleep_val === null) sleep_val=0.8;

// pterm is the putty terminal emulator ery lightweight
// See https://www.chiark.greenend.org.uk/~sgtatham/putty
PTERM_CMD='C:\\Users\\lalannd2\\MyApps\\Putty\\pterm.exe';
// mintty is the cygwin/mingw/msys terminal emulator, its big advantage is to embed graphics in terminal output (sixel, tektronix ..), see https://mintty.github.io/mintty.1.html
// try : GNUTERM=sixel /mingw64/bin/gnuplot -e "splot [x=-3:3] [y=-3:3] sin(x) * cos(y)"
//MINTTY_CMD='C:\\Software\\wsltty\\bin\\mintty.exe bash -c ';
MINTTY_CMD='C:\\Software\\UnixTools\\msys64\\usr\\bin\\mintty.exe';


var sshMajorVersion=SCmd(SSH_CMD+' -V').trim().replace(/OpenSSH.*_(.*), .*/, "$1").replace(/\..*/, "");

function do_ssh(user_host, pass) {
  var ssh_cmd;
  switch (term_type) {
    case 'pterm':
    case 'putty':
      ssh_cmd=PTERM_CMD+' -e '+SSH_CMD;
      break;
    case 'mintty':
      if (MINTTY_CMD!=="") ssh_cmd=MINTTY_CMD+' '+SSH_CMD;
      break;
    default:
      ssh_cmd=SSH_CMD;
      break;
  }

  cmd=ssh_cmd+' '+user_host;

  // Display trace and ask for confirmation to run
  if (trace) { // Trace
    msg="SSH major version "+sshMajorVersion+'\n';
    msg+=cmd+'\n';
    for (i=0; i < pass.length; i++) msg+='['+pass[i]+']';
    if (!confirm(msg)) return false;
  }

  // Effectively run the ssh command
  if (true) {
    wsh().Run(cmd, 1, false);
    // mintty may be slower to start because of the cygwin.dll load time
    if (term_type==='mintty') sleep(2);

    // Send the passwords
    for (i=0; i < pass.length; i++) {
      sleep(sleep_val);
      wsh().SendKeys(pass[i]+"{ENTER}");
    }
  }

  return true;
}

function usage_and_die () {
  WScript.echo("Missing parameters.\nThere must be at least one, two or groups of three parameters.\n 1) If only one is provides it defines the host to drectly reach with USERNAME as login and SSHPASS as password (or default).\n 2) If two provided they define the proxy host and the target host to reach with USERNAME as login and SSHPASS as password for both hosts.\n 3) user, password and host.\nIf there is only one group then we run a direct ssh as user@host.\nOtherwise we do as many jumps as necessary to reach the last host.\nExamples:\nsshj.js user pass host\n==> will run a direct ssh as user@host.\nsshj.js user1 pass1 host1 user2 pass2 host2\n==> will run a ssh jump through host1 to reach host2.\nsshj.js host1 user1 pass1 host2 user2 pass2 host3 user3 pass3\n==> will run a ssh jump through host1, host2 to reach host3.\nAnd so on ...\nThen the passwords input is simulated as much time as necessary.\n\nYou may also had various named parameters:\n  1) 'term' with values pterm, putty, mintty or raw to change the terminal emulator (by default cmd console).\n  2) 'sleep' with floating point sleeping value in seconds to change time between password auto-send (by default 0.8 sec).\n  3) 'trace' to display traces.\n  4) 'hostk' to strictly check host key (does not check by default).");
  WScript.quit();
}

function disp_args () {
  marg='';
  for(i=0; i< argv.length; i++) {
    marg+=argv[i]+', ';
  }

  alert(marg);
}

def_user=getenv("USERNAME");
//def_apass=atob_if(getenv("ADPASS"));
def_lpass=atob_if(getenv("LDPASS"));

switch (argv.length) {
  // Error no param
  case 0:
    usage_and_die();
    break;
  // Simple ssh with current USERNAME and default password to host param1
  case 1:
    if (def_user!=="" && def_lpass!=="") do_ssh(def_user+'@'+argv[0], [ def_lpass ]);
    else WScript.echo("Environment variable USERNAME has no value (a).");
    break;
  // One ssh jump with current USERNAME@server1 as proxy and USERNAME@server2 as target and %LDPASS% as password
  case 2:
    if (def_user!=="" && def_lpass!=="") {
      defua1=def_user+'@'+argv[0];
      defua2=def_user+'@'+argv[1];
      var def_pas=[ def_lpass, def_lpass ];

      if (sshMajorVersion > 7) do_ssh(' -J '+defua1+' '+defua2, def_pas);
      else do_ssh(' -o ProxyCommand="'+SSH_CMD+' -W %h:%p '+defua1+'" '+defua2, def_pas );
    } else WScript.echo("Environment variable USERNAME has no value (b).");
    break;
  // Parameters provided by batch of 3 in the form "user password host"
  //   Makes one simple ssh if only 3 parameters
  //   Run ssh jump if more than 3 parameters.
  default :
    if (argv.length%3===0) {
      var user_host;
      var pass=[];

      if (argv.length===3) {
        user_host=argv[1]+'@'+argv[0];
        pass[0]=argv[2];
      } else {
        user_host='';

        for(i=0; i < argv.length; i+=3) {
          if (sshMajorVersion > 7) {
            // Option -J in ssh V8 does WORK correctly.
            if (i===0) {
              user_host+=' -J ';
            } else {
              if (i===argv.length-3) {
                user_host+=' ';
              } else user_host+=',';
            }
          } else {
            // Option -J in ssh before V8 does NOT WORK correctly.
            if (i===argv.length-3) user_host+=' ';
            else user_host+=' -o ProxyCommand="'+SSH_CMD+' -W %h:%p ';
          }

          user_host+=argv[i]+'@'+argv[i+2];
          if (i !==argv.length-3) user_host+='"';
          pass[i/3]=atob_if(wsh().ExpandEnvironmentStrings(argv[i+1]));
        }
      }

      do_ssh(user_host, pass);
    } else usage_and_die();
    break;
}
  </script>   
</job>
